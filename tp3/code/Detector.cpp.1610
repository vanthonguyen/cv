/*
 * =====================================================================================
 *
 *       Filename:  Detector.cpp
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  10/15/2013 12:48:19 PM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  NGUYEN Van Tho (), thonv133@gmail.com
 *   Organization:  
 *
 * =====================================================================================
 */


#include <iostream>
#include <opencv2/opencv.hpp>
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <stdlib.h>
#include <unistd.h>
#include <vector>
#include <sys/types.h>
#include <dirent.h>
#include <stdio.h>

#include "Detector.h"

//float *histogram;
const double THRESHOLD = 0.2;
#define dirExamplesSkin  "examples/skin"
#define dirExamplesNonSkin  "examples/nonskin"
#define imageExtension ".jpg"
#define IMAGES "images"

int main(int argc, char ** argv){
    //devoir utiliser parametre
    if(argc < 3){
        printf("Parammeter is not enough, use ./detector scale image_name ...");
        return 2;
    }
    char *ptr;
    int scale = strtol(argv[1], &ptr, 10);
    Detector detector(scale, argv[2]);
    if(argc == 2){
        detector.massDetect();
    }else{
        detector.detect();
        detector.save();
    }
    return 0;
}

Detector::Detector(int s, char * file): 
    histogramSkin(s + 1, s + 1, CV_32F, cv::Scalar(0)), 
    histogramNonSkin(s + 1, s + 1, CV_32F, cv::Scalar(0)){
    totalPixelSkin = 0;
    totalPixelNonSkinBase = 0;
    totalPixelSkinBase = 0;
    totalPixelNonSkin = 0;
    histogramSkin.setTo(0.0);
    histogramNonSkin.setTo(0.0);
    scale = s;
//    imageName = (char *)malloc(128*sizeof(char));
//    imageName = strncpy(imageName, file, strlen(file));
    cv::Mat img = cv::imread(file, CV_LOAD_IMAGE_UNCHANGED);
    if(!img.data){
        printf("SkinDetector, No data: %s\n", file );
    }
    cv::cvtColor(img, image, CV_BGR2Lab);
    getHistogramSkin(); 
    getHistogramNonSkin(); 

//    getPosibility();
//    getPosibilityOfSkin();
//    getPosibilityOfNonSkin();
}

//Detector::~Detector(){
//    free(imageName);
//}
void Detector::detect(){
    possibilityOfSkin = 1.0*totalPixelSkin/totalPixelSkinBase;
    possibilityOfNonSkin = 1.0*totalPixelNonSkin/totalPixelNonSkinBase;
    for (int i = 0; i < image.size().width; i++){
        for (int j = 0; j < image.size().height; j++){
            cv::Vec3b labPixel = image.at<cv::Vec3b>(j, i);
            //calculer index
            int a = (int)labPixel.val[1]*scale/MAX_VALUE;
            int b = (int)labPixel.val[2]*scale / MAX_VALUE;
            int index = b*scale + a;
            double ps = histoS[b][a]; 
            double pns = histoNS[b][a]; 
            double possibility = ps*possibilityOfSkin / (ps*possibilityOfSkin + pns*possibilityOfNonSkin);
//std::cout<<possibility<<" ";
            labPixel.val[1] = 128;
            labPixel.val[2] = 128;
            labPixel.val[0] = 0;
            if(possibility < THRESHOLD){
                image.at<cv::Vec3b>(j, i) = labPixel;
            }
        }
    }
    //write image

    cv::cvtColor(image, image, CV_Lab2BGR); 
    cv::imshow("image", image);
    cv::waitKey();
}

void Detector::massDetect(){
    std::vector<std::string> listFile = getExamples(IMAGES); 


    for (std::vector<std::string>::iterator it = listFile.begin() ; it != listFile.end(); ++it){
        char imageUrl[128];
        sprintf(imageUrl, "IMAGES/%s", (*it).c_str());
        cv::Mat img2;    
        cv::Mat img = cv::imread(imageUrl, CV_LOAD_IMAGE_UNCHANGED);
        if(!img.data){
            printf("Detector, No data: %s\n", imageUrl );
        }
        cv::GaussianBlur(img, img, cv::Size(3,3), 0);
        cv::cvtColor(img, img, CV_BGR2Lab);
        img.copyTo(img2);

        possibilityOfSkin = 1.0*totalPixelSkin/totalPixelSkinBase;
        possibilityOfNonSkin = 1.0*totalPixelNonSkin/totalPixelNonSkinBase;
        for (int i = 0; i < img.size().width; i++){
            for (int j = 0; j < img.size().height; j++){
                cv::Vec3b labPixel = img.at<cv::Vec3b>(j, i);
                //calculer index
                int a = (int)labPixel.val[1]*scale / MAX_VALUE;
                int b = (int)labPixel.val[2]*scale / MAX_VALUE;
                int index = b*scale + a;
                double ps = histoS[b][a]/totalPixelSkinBase; 
                double pns = histoNS[b][a]/totalPixelNonSkinBase; 
//                double possibilityIsSkin = ps*possibilityOfSkin / (ps*possibilityOfSkin + pns*possibilityOfNonSkin);
//                double possibilityIsNonSkin = pns*possibilityOfNonSkin / (ps*possibilityOfSkin + pns*possibilityOfNonSkin);
                labPixel.val[1] = 128;
                labPixel.val[2] = 128;
                labPixel.val[0] = 0;
//                if(possibilityIsSkin < possibilityOfNonSkin){
//                if(possibilityIsSkin < THRESHOLD){
                if(ps* possibilityOfSkin/pns * possibilityOfNonSkin < 1.0){
                    img.at<cv::Vec3b>(j, i) = labPixel;
                }else{
                    img2.at<cv::Vec3b>(j, i) = labPixel;
                }

            }
        }
        cv::medianBlur(img, img, 5);
        cv::medianBlur(img2, img2, 5);
        cv::cvtColor(img, img, CV_Lab2BGR);
        cv::cvtColor(img2, img2, CV_Lab2BGR);
        //write image

        char imageOutSkin[128];
        char imageOutNonSkin[128];
        sprintf(imageOutSkin, "output/skin/%s",  (*it).c_str());
        sprintf(imageOutNonSkin, "output/nonskin/%s",  (*it).c_str());
        cv::imwrite(imageOutSkin, img);
        cv::imwrite(imageOutNonSkin, img2);
    }
                                                                                                                                                               
} 

void Detector::getPosibility(){
    int ns = 0;
    int nns = 0;
    for (int i = 0; i < histogramSkin.size().width; i++){
        for (int j = 0; j < histogramSkin.size().height; j++){
            ns+= histogramSkin.at<double>(j,i);
        }
    }
    for (int i = 0; i < histogramNonSkin.size().width; i++){
        for (int j = 0; j < histogramNonSkin.size().height; j++){
            nns += histogramNonSkin.at<double>(j,i);
        }
    }
    possibilityOfSkin = ns*1.0 /(ns+nns);
    possibilityOfNonSkin = 1 - possibilityOfSkin;
}

void Detector::save(){
    cv::Mat newImage;
    cv::cvtColor(image, newImage, CV_Lab2BGR); 
    imwrite( "output.jpg", newImage);
}

void Detector::getHistogramSkin(){
    std::vector<std::string> listFile = getExamples(dirExamplesSkin);
    for (std::vector<std::string>::iterator it = listFile.begin() ; it != listFile.end(); ++it){
        char imageUrl[128];
        sprintf(imageUrl, "%s/%s", dirExamplesSkin, (*it).c_str());
        getHistogram(imageUrl, 1);
    }

    //write to text file
//    for(int i = 0; i < scale; i++){
//        for(int j = 0; j < scale; j++){
//std::cout<<histogramSkin.at<double>(i, j)<<" ";
//        }
//std::cout<<std::endl;
//    }

    for(int i = 0; i < scale; i++){
        for(int j = 0; j < scale; j++){
//std::cout<<histogramSkin.at<double>(j, i)<<" ";
//            histogramSkin.at<double>(j, i) = histogramSkin.at<double>(j, i) / totalPixelSkin;
//std::cout<<histogramSkin.at<double>(j, i)<<std::endl;
//            histoS[i][j] /= totalPixelSkinBase;
        }
    }
    
//    for(int i = 0; i < scale; i++){
//        for(int j = 0; j < scale; j++){
//std::cout<<histogramSkin.at<double>(i, j)<<" ";
//        }
//std::cout<<std::endl;
//    }
//    cv::imshow("Non", histogramSkin);
//    cv::waitKey();
}   

void Detector::getHistogramNonSkin(){
    std::vector<std::string> listFile = getExamples(dirExamplesNonSkin);
    for (std::vector<std::string>::iterator it = listFile.begin() ; it != listFile.end(); ++it){
        char imageUrl[128];
        sprintf(imageUrl, "%s/%s", dirExamplesNonSkin, (*it).c_str());
        getHistogram(imageUrl, 0); 
    }   
    for(int i = 0; i < scale; i++){
        for(int j = 0; j < scale; j++){
//            histogramNonSkin.at<double>(j, i) = histogramNonSkin.at<double>(j, i) / totalPixelNonSkin;
//            histoNS[i][j] /= totalPixelNonSkinBase;
        }
    }   
//    cv::imshow("Non", histogramNonSkin);
//    cv::waitKey();
}  


void Detector::getHistogram(char *file, int isSkinExample){                                                                                                    
    //read file
    cv::Mat image = cv::imread(file, CV_LOAD_IMAGE_UNCHANGED);
    cv::cvtColor(image, image, CV_BGR2Lab);     
    //calculer l'histogramme                                                                                           
    for (int i = 0; i < image.size().width; i++){
        for (int j = 0; j < image.size().height; j++){
            cv::Vec3b labPixel = image.at<cv::Vec3b>(j, i);
            //calculer index
            if(labPixel.val[0] == 0 && labPixel.val[1] == 128 && labPixel.val[2] == 128){
                continue;
            }
            int a = (int)labPixel.val[1]*scale / MAX_VALUE;
            int b = (int)labPixel.val[2]*scale / MAX_VALUE;
//std::cout<<a<<" "<<b<<"    ";
            if(isSkinExample){
           //     histogramSkin.at(index) += 1;
//                histogramSkin.at<double>(b, a) = histogramSkin.at<double>(b, a) + 1;
                histoS[b][a] += 1.0;
                totalPixelSkin++;
            }else{
//                histogramNonSkin.at<double>(b, a) = histogramNonSkin.at<double>(b, a) + 1;
                histoNS[b][a] += 1.0;
                totalPixelNonSkin++;
            }
        }
    }
    if(isSkinExample){ 
        totalPixelSkinBase += image.size().width * image.size().height;
    }else{
        totalPixelNonSkinBase += image.size().width * image.size().height;
    }
}

std::vector<std::string> Detector::getExamples(const char *dir){
    DIR *dp;                                                                                                                                                   
    struct dirent *ep;
    std::vector<std::string> listFile;
         
    dp = opendir (dir);
    if (dp != NULL){    
        while (ep = readdir (dp)){
            if(isImageFile(ep->d_name)){
                listFile.push_back(ep->d_name);
//                puts (ep->d_name);
            }
        }
        (void) closedir (dp);
    }else{
        perror ("Couldn't open the directory");
    }

    return listFile;
}

int Detector::isImageFile(char *f){
    if(strstr(f, imageExtension) || strstr(f, ".png")){
        return 1;
    }
    return 0;
}

bool Detector::histogramTest(char *file) {
    return (access(file, F_OK ) == 0);
}

void Detector::writeHistogram(){


}
void Detector::readHistogram(){

}
